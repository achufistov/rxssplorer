import argparse
import os
import subprocess
import re
from termcolor import colored
from utils import *

def print_banner():
    banner = """

,-.  .   ,  ,-.   ,-.      .                 
|  )  \ /  (   ` (   `     |                 
|-<    X    `-.   `-.  ;-. | ,-. ;-. ,-. ;-. 
|  \  / \  .   ) .   ) | | | | | |   |-' |   
'  ' '   `  `-'   `-'  |-' ' `-' '   `-' '   
                       '                                                                                                                                                                                                                                                  
                                             
       ,    ,-.     ,-.                      
      '|   /  /\   /  /\                     
. ,    |   | / |   | / |                     
|/     |   \/  /   \/  /                     
'      ' o  `-'  o  `-'                      
                                                           

A Web Application Reflected XSS Scanner
"""
    print(colored(banner, "green", attrs=["bold"]))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--output", help="Output format (txt/html). Txt will be generated by default", choices=["txt", "html"], required=False, default="txt")
    parser.add_argument("--headers", help="HTTP headers to pass to airixss and dalfox (e.g., 'header1: value1,header2: value2')", required=False, default="")
    args = parser.parse_args()

    print_banner()

    while True:
        choice = input(colored("\nDo you want to specify a single URL or use a file containing the URLs of the target hosts? (u/f): ", "blue", attrs=["bold"]))
        if choice.lower() == "u":
            url = input(colored("\nEnter the URL of the target to scan: ", "blue", attrs=["bold"]))
            hosts = [url]
            break
        elif choice.lower() == "f":
            file_path = input(colored("\nEnter the path to the file containing the URL of the targets: ", "blue", attrs=["bold"]))
            if os.path.isfile(file_path):
                with open(file_path, "r") as f:
                    hosts = [line.strip() for line in f.readlines()]
                break
            else:
                print(colored("\nInvalid file path. Please try again.", "red", attrs=["bold"]))
        else:
            print(colored("\nInvalid choice. Please try again.", "red", attrs=["bold"]))

    while True:
        choice = input(colored("\nDo you want to specify a single payload or use a file containing a list of payloads? (p/f): ", "blue", attrs=["bold"]))
        if choice.lower() == "p":
            payload = input(colored("\nEnter the payload to start the scan: ", "blue", attrs=["bold"]))
            payloads = [payload]
            payload_file = None
            break
        elif choice.lower() == "f":
            payload_file = input(colored("\nEnter the path to the file a list of payloads: ", "blue", attrs=["bold"]))
            if os.path.isfile(payload_file):
                with open(payload_file, "r") as f:
                    payloads = [line.strip() for line in f.readlines()]
                break
            else:
                print(colored("\nInvalid file path. Please try again.", "red", attrs=["bold"]))
        else:
            print(colored("\nInvalid choice. Please try again.", "red", attrs=["bold"]))

    for payload in payloads:
        print(colored(f"\nTesting endpoints with payload: {colored(payload, 'light_yellow', attrs=['bold'])}", "blue", attrs=["bold"]))
        for host in hosts:
            print(colored(f"\nCrawling endpoints for {colored(host, 'light_yellow', attrs=['bold'])}...", "blue", attrs=["bold"]))
            try:
                crawl_endpoints(host, "waybackurls")
                crawl_endpoints(host, "hakrawler")
                crawl_endpoints(host, "gau")
                crawl_endpoints(host, "katana")
            except Exception as e:
                print(colored(f"\nError crawling endpoints for {host}: {str(e)}", "red", attrs=["bold"]))
                continue
            print()

        try:
            remove_duplicates()
        except Exception as e:
            print(colored(f"\nError removing duplicates: {str(e)}", "red", attrs=["bold"]))

        try:
            with open(f"results.{args.output}", "a") as f:
                test_endpoints(payload, payload_file, output_format=args.output, headers=args.headers, file=f)
        except Exception as e:
            print(colored(f"\nError testing endpoints: {str(e)}", "red", attrs=["bold"]))

        try:
            clean_up_files()
        except Exception as e:
            print (colored(f"\nError cleaning up files: {str(e)}", "red", attrs=["bold"]))

    print(colored(f"\nThe work is over. You can get acquainted with all vulnerable endpoints here: results.{args.output}", "green", attrs=["bold"]))

if __name__ == "__main__":
    main()